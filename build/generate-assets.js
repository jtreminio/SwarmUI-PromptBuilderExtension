#!/usr/bin/env node

/**
 * Build script that generates TypeScript files from HTML templates and CSS
 * This runs before TypeScript compilation
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const ASSETS_DIR = path.join(__dirname, '../Assets');
const TEMPLATES_DIR = ASSETS_DIR + '/templates';
const SRC_DIR = path.join(__dirname, '../src');
const OUTPUT_FILE = path.join(SRC_DIR, 'generated-assets.ts');

/**
 * Escape backticks and ${} in template strings
 */
function escapeTemplateString(str) {
    return str
        .replace(/\\/g, '\\\\')
        .replace(/`/g, '\\`')
        .replace(/\$/g, '\\$');
}

/**
 * Read all HTML templates and generate TypeScript constants
 */
function generateTemplates() {
    const templates = {};
    const files = fs.readdirSync(TEMPLATES_DIR).filter(f => f.endsWith('.html'));
    
    for (const file of files) {
        const name = path.basename(file, '.html');
        const content = fs.readFileSync(path.join(TEMPLATES_DIR, file), 'utf8');
        const camelCaseName = name
            .split('-')
            .map((word, i) => i === 0 ? word : word.charAt(0).toUpperCase() + word.slice(1))
            .join('');
        
        templates[camelCaseName] = escapeTemplateString(content);
    }
    
    return templates;
}

/**
 * Read CSS file and generate TypeScript constant
 */
function generateStyles() {
    const cssPath = path.join(ASSETS_DIR, 'prompt-builder.css');
    const content = fs.readFileSync(cssPath, 'utf8');
    return escapeTemplateString(content);
}

/**
 * Generate the TypeScript file
 */
function generateTypeScriptFile() {
    const templates = generateTemplates();
    const styles = generateStyles();
    
    let output = `// This file is auto-generated by build/generate-assets.js
// Do not edit directly - edit templates/*.html and Assets/prompt-builder.css instead

`;

    // Generate templates namespace with export
    output += `// HTML Templates\n`;
    output += `namespace Templates {\n`;
    for (const [name, content] of Object.entries(templates)) {
        output += `    export const ${name} = \`${content}\`;\n\n`;
    }
    output += `}\n\n`;
    
    // Generate styles constant
    output += `// CSS Styles\n`;
    output += `const STYLES = \`${styles}\`;\n\n`;
    
    // Generate helper function to inject styles
    output += `// Helper function to inject styles into the page\n`;
    output += `function injectStyles(): void {\n`;
    output += `    if (document.getElementById('pb-injected-styles')) return;\n`;
    output += `    const style = document.createElement('style');\n`;
    output += `    style.id = 'pb-injected-styles';\n`;
    output += `    style.textContent = STYLES;\n`;
    output += `    document.head.appendChild(style);\n`;
    output += `}\n`;
    
    fs.writeFileSync(OUTPUT_FILE, output, 'utf8');
    console.log(`✅ Generated ${OUTPUT_FILE}`);
    console.log(`   - ${Object.keys(templates).length} HTML templates`);
    console.log(`   - CSS styles (${Math.round(styles.length / 1024)}KB)`);
}

// Run the generator
try {
    generateTypeScriptFile();
} catch (error) {
    console.error('❌ Error generating assets:', error.message);
    process.exit(1);
}

